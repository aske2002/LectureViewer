<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <SpaRoot>../../../Client</SpaRoot>
    <SpaProxyServerUrl>https://localhost:51089</SpaProxyServerUrl>
    <SpaProxyLaunchCommand>yarn dev</SpaProxyLaunchCommand>
    <RootNamespace>backend.Web</RootNamespace>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <PreserveCompilationContext>true</PreserveCompilationContext>
    <AssemblyName>backend.Web</AssemblyName>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Application\Application.csproj" />
    <ProjectReference Include="..\Infrastructure\Infrastructure.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Azure.Extensions.AspNetCore.Configuration.Secrets" />
    <PackageReference Include="Azure.Identity" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.UI" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy">
      <!-- The SPA Proxy is only used at development time -->
      <Publish>false</Publish>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="NSwag.AspNetCore" />
    <PackageReference Include="NSwag.CodeGeneration.TypeScript" />
    <PackageReference Include="NSwag.MSBuild">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="FluentValidation.AspNetCore" />
  </ItemGroup>

  <Target Name="StartViteDevServer" BeforeTargets="DebugRun">
    <Exec WorkingDirectory="$(SpaRoot)"
      Command="yarn start"
      Condition=" '$(Configuration)' == 'Debug' " />
  </Target>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build"
    Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'"
      Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high"
      Text="Restoring dependencies using 'yarn'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="yarn install" />
  </Target>

  <!-- Auto-generated Open API specification and Angular TypeScript clients -->
  <PropertyGroup>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
  </PropertyGroup>


  <Target Name="NSwag" AfterTargets="PostBuildEvent"
    Condition=" '$(Configuration)' == 'Debug' And '$(SkipNSwag)' != 'True'">
    <Exec ConsoleToMSBuild="true"
      ContinueOnError="true"
      WorkingDirectory="$(ProjectDir)"
      EnvironmentVariables="ASPNETCORE_ENVIRONMENT=Development"
      Command="$(NSwagExe_Net90) run config.nswag /variables:Configuration=$(Configuration)">
      <Output TaskParameter="ExitCode" PropertyName="NSwagExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="NSwagOutput" />
    </Exec>


    <Message Text="NSwag Output:" Importance="high" />
    <Message Text="--------------------------" Importance="high" />
    <Message Text="$(NSwagOutput)" Importance="high" />

    <!-- Optional: Log line by line -->
    <WriteLinesToFile
      File="nswag-output.log"
      Lines="$(NSwagOutput)"
      Overwrite="true" />
    <Message Text="NSwag output written to nswag-output.log" Importance="high" />

    <Error Text="NSwag failed. See nswag-output.log for details."
      Condition="'$(NSwagExitCode)' != '0'" />

  </Target>

  <Target Name="BuildWithoutNSwag">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Build"
      Configuration="Debug" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="yarn install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="yarn build -- --configuration production" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')"
        Exclude="@(ResolvedFileToPublish)">
        <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>